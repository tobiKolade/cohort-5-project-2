@import url(https://fonts.googleapis.com/css?family=Roboto:400,300,500);

body {
    margin: 0 auto;
    width: 90%;
    max-width: 1240px;
    font-family: 'Roboto', sans-serif;
    background-color: #f6f6f6;
}

.container {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr 1fr;
    grid-template-areas:
        "head head head head"
        "products products products products"
        "footer footer footer footer";
}

footer {
    grid-area: footer;
    padding: 10px;
    background-color: rgba(232, 244, 246, 0.513);
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
}

.contact {
    width: 60%;
}

.newsletter {
    width: 35%;
}


h5 {
    font-weight: 500;
    line-height: 1.7em;
}

h6 {
    color: #666;
    font-size: 14px;
}

/* Product Layout */

.product-filter {
    display: flex;
    padding: 30px 0;
    grid-area: head;
}

.product-filter h1 {
    font-size: 28px;
    font-weight: 300;

    /* https://www.w3schools.com/cssref/css3_pr_flex-grow.php */

    /* Our <h1> element is given a flex-grow value of 1 so that it both expands
     the flex container to full width and expands itself to full the remaining space 
     (which right-aligns the sorting dropdowns). */
    flex-grow: 1;
}

.product-filter-criteria {
    /* To horizontally align the child elements of our .product-filter-criteria container,
    we we’ll make it a flex container too. You can nest flex containers! */
    display: flex;
    align-self: flex-end;
}

.collection-sort {
    display: flex;
    flex-direction: column;
}

.collection-sort:first-child {
    padding-right: 20px;
}

label {
    color: #666;
    font-size: 10px;
    font-weight: 500;
    line-height: 2em;
    text-transform: uppercase;
}

/* For our design, we want 5 items per row and to wrap the rest to new rows as needed.
 To get five per row, they’ll need to have a width of 20% (5 * 20 = 100).
 Settings flex-basis: 20% would do the trick, but when we factor in padding,
 it exceeds 100% and we’ll only get 4 per row. With 2% padding on either side and 
 16% flex-basis, it’ll be just right. */
.products {
    display: flex;
    flex-wrap: wrap;
    grid-area: products;
}

.product-card {
    padding: 2%;
    /* The flex-grow property specifies how much the item will grow relative
     to the rest of the flexible items inside the same container. */

    /* To start exerting control over the width for our flex items, 
     we will add flex: 1; so that all of our flex items take equal space in the row */
    flex-grow: 1;

    /* The flex-basis CSS property sets the initial main size of a flex item.
    It sets the size of the content box unless otherwise set with box-sizing. */
    flex-basis: 16%;

    /* Top 2 could be rewritten as */
    /* flex: 1 16%; */

    display: flex;
    /* so child elements can use flexbox stuff too! */
    flex-direction: column;

    background-color: #FFF;

    /* https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow */
    /* Four length values and a color */
    /* <length> | <length> | <length> | <length> | <color> */
    box-shadow: 0px 0px 1px 0px rgba(0, 0, 0, 0.25);
}

.product-image img {
    max-width: 100%;
}

.product-info {
    margin-top: auto;
}


/* Optional responsive flexboxing */

/* As we have less horizontal space to work with, we’d like to reduce 
the number of products per row. For example, if the max viewport is 920px, 
we would like the number of items per row to be limited to four which we
 can accomplish with the following: */

@media (max-width: 920px) {
    .product-card {
        flex: 1 21%;
    }

    .products .product-card:first-child,
    .products .product-card:nth-child(2) {
        flex: 2 46%;
    }
}

@media (max-width: 600px) {
    .product-card {
        flex: 1 46%;
    }
}

@media (max-width: 480px) {
    h1 {
        margin-bottom: 20px;
    }

    .product-filter {
        flex-direction: column;
    }

    .product-filter-criteria {
        align-self: flex-start;
    }
}


/* Style the input elements and the submit button */
input[type=email],
input[type=submit] {
    width: 100%;
    padding: 12px;
    margin: 6px 0;
    display: inline-block;
    border: 1px solid #ccc;
    box-sizing: border-box;
}


/* Style the submit button */
input[type=submit] {
    background-color: #04AA6D;
    color: white;
    border: none;
}

input[type=submit]:hover {
    opacity: 0.8;
}